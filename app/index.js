const TelegramBot = require('node-telegram-bot-api');

const fs = require('fs');
const tokenJson = JSON.parse(fs.readFileSync('./token.json', 'utf8'));
const configJson = JSON.parse(fs.readFileSync('./config.json', 'utf8'));

const token = tokenJson['token'];
console.log('token : ' + token);
const bot = new TelegramBot(token, {polling: true});

const wellcomePreMsg = 'Hi ';
const wellcomepostMsg = 'Wellcome to Remiit. Thanks for concerning Remiit project.:)';

const Queue = require('./queue.js');
let welcomeMsgQ = new Queue();

let welcomeQueueSize = configJson['welcomeQueueSize'];
let welcomeBatchRemoveSize = configJson['welcomeBatchRemoveSize'];

bot.on('message', (msg) => {
    //new chat member
    if(msg.new_chat_members != null){
        let sentMessage = sendMessage(bot, msg, onNewChatMember(msg));

        //remove joined message which generated by telegram app automatically.
        bot.deleteMessage(msg.chat.id, msg.message_id);

        // add welcome Message to queue and remove oldest
        sentMessage.then((message) => {
            welcomeMsgQ.add(message);
            if(welcomeMsgQ.size() > welcomeQueueSize) {
                for (let i = 0; i < welcomeBatchRemoveSize; i++) {
                    const oldestMessage = welcomeMsgQ.remove();
                    bot.deleteMessage(oldestMessage.chat.id, oldestMessage.message_id);
                }
            }

        });
    }

    if(msg.left_chat_member != null){
        onRemoveMember(msg);
        bot.deleteMessage(msg.chat.id, msg.message_id);
    }
    if(!containsBlacklist(msg)){
        sendMessage(bot, msg, "Eho: " + msg.text);
    }
});


function containsBlacklist(msg) {
    let result = false;
    if(containsUrl(msg)){
        sendMessage(bot, msg.chat.id, getUserName(msg.from) + ". You cannot send message which contains url on this chat.");
        result = true;
    }

    if(containsPhoto(msg)){
        sendMessage(bot, msg, getUserName(msg.from) + ". You cannot send message which contains photo on this chat.");
        result = true;
    }

    if(result){
        bot.deleteMessage(msg.chat.id, msg.message_id);
        console.log('Message[' + msg.message_id + '] is removed on the chat[' + msg.chat.id + ']');
    }
    return result;
}

function containsUrl(msg){
    let result = false;
    if(msg.entities !== undefined) {
        for(let i=0; i< msg.entities.length; i++){
            const entity = msg.entities[i];
            if (entity.type == 'url') {
                console.log('User \'' + getUserName(msg.from) + '\' send message which contains url.');
                result = true;
            }

        }
    }
    return result;
}

function containsPhoto(msg){
    let result = false;
    if (msg.photo !== undefined) {
        if (msg.photo.length > 0) {
            result = true;
        }
    }
    return result;
}

function getUserName(user){
    return user.last_name === '' ? user.first_name : user.first_name + ' ' + user.last_name;
}
// bot.on('new_chat_members', (msg) => {
function onNewChatMember(msg) {
    let new_members = '';
    // for (var member in msg.new_chat_members) {
    //     //member is user type.
    //     new_members += getUserName(member) + ', ';
    // }
    msg.new_chat_members.forEach((member, idx) => {
        new_members += getUserName(member) + ', ';
    });
    new_members = new_members.substring(0, new_members.length - 2);
    new_members += '. ';
    console.log('bot on ' + 'new_chat_members' + '[ ' + new_members);
    return wellcomePreMsg + new_members + wellcomepostMsg;
}

function onRemoveMember(msg){
    var str = getUserName(msg.left_chat_member);
    console.log(str + ' is removed on the chat ' + msg.chat.name);
}
// });



/**
 * This method is to treat sendMessage method automatically. Because the return value of sendMessage is Promise type.
 * </br>
 * @param bot
 * @param msg
 */
function sendMessage(bot, msg, text){
    if( text !== undefined && text !== "") {
        const returnValue = bot.sendMessage(msg.chat.id, text)
            .catch((error) => {
                console.error(error);
            });
        return returnValue;
    }
}



// function isWellcomeMsg(msg) {
//     _msg = msg.toLowerCase();
//     if(_msg.includes(''))
// }